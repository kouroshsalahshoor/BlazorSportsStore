@page "/"
@inherits OwningComponentBase<ApplicationDbContext>

@if (_items == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row m-1 p-1">
        <div id="categories" class="col-3">

            <a class="btn btn-block @(_category == null ? "btn-primary" : "btn-outline-primary")"
               href="javascript:void(0)"
               @onclick="@(() => categoryClicked())">
                All
            </a>
            @foreach (string category in _categories)
            {
                <a class="btn btn-block @(_category == category ? "btn-primary" : "btn-outline-primary")"
                   href="javascript:void(0)"
                   @onclick="@(() => categoryClicked(category))">
                    @category
                </a>
            }

        </div>
        <div class="col-9">
            <Pagination CurrentPage="_currentPage" NumberOfItems="_numberOfItems" PageSize="_pageSize" Radius="2"
                        OnClick="reciever" />

            @foreach (var p in _items)
            {
                <div class="card card-outline-primary m-1 p-1">
                    <div class="bg-faded p-1">
                        <h4>
                            @p.Name
                            <span class="badge badge-pill badge-primary" style="float:right">
                                <small>@p.Price.ToString("c")</small>
                            </span>
                        </h4>
                    </div>
                    <div class="card-text p-1">@p.Description</div>
                </div>
            }
        </div>
    </div>

}

@code{
    public ApplicationDbContext _db => Service;

    List<Product> _items { get; set; }

    private int _pageSize = 4;
    private int _currentPage = 1;
    private int _numberOfItems;

    private List<string> _categories;
    private string _category;

    protected override void OnInitialized()
    {
        load();

        var items = _db.Products.ToList();
        _numberOfItems = items.Count();
        _categories = items.Select(x => x.Category).Distinct().ToList();
    }

    private void load()
    {
        _items = _db.Products
            .Where(p => _category == null || p.Category == _category)
            .OrderBy(p => p.ProductID)
            .Skip((_currentPage - 1) * _pageSize)
            .Take(_pageSize).ToList();
    }

    private void reciever(int page)
    {
        _currentPage = page;

        load();
        StateHasChanged();
    }

    private void categoryClicked(string category = null)
    {
        _category = category;

        load();
        _numberOfItems = _db.Products.Where(x=> _category == null || x.Category == _category).Count();
    }
}
